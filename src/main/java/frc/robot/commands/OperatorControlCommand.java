package frc.robot.commands;

import org.swampscottcurrents.serpentframework.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.MainJoystick;
import frc.robot.Robot;
import frc.robot.RobotMovementRecorder;
import frc.robot.subsystems.*;

/** Allows for the driver to control the robot's drivetrain. */
public class OperatorControlCommand extends SerpentCommand {

    private final MainJoystick joystick;
    private final Drivetrain drivetrain;
    private boolean isControlFieldOriented = false;

    private RobotMovementRecorder recorder;

    /** Creates a new OperatorControlCommand for the specified drivetrain. */
    public OperatorControlCommand(Drivetrain train) {
        joystick = Robot.getInstance().joystick;
        drivetrain = train;
        addRequirements(train);
    }

    @Override
    public void initialize() {
        //  recorder = new RobotMovementRecorder(0.1, barrel);
        drivetrain.resetGyroscope();
        recorder = new RobotMovementRecorder(0.1);
    }
    
    private double processRotationPower(double degrees) {
        final double maxPower = 0.75;
        return Math.max(-maxPower, Math.min(maxPower, signPow(degrees / 90, 0.35)));
    }

    private double signPow(double value, double power) {
        return Math.signum(value) * Math.pow(Math.abs(value), power);
    }

    public int currentPosition;
    public double distance = 5;

    public void executeShoot() {

    }

    public double calculateFootCount() {
        return 0;
    }

    @Override
    public void execute() {
        //executeShoot();
        if(true) {
            //return;
        }
        if(false && isControlFieldOriented) {
            Quaternion2D robotOrientation = Quaternion2D.fromDegrees(-90 + drivetrain.getGyroscopeRotation());

            double x = -joystick.getAxis(MainJoystick.Y_AXIS) * 0.75;
            double y = joystick.getAxis(MainJoystick.X_AXIS) * 0.75;

            Quaternion2D joystickOrientation = Quaternion2D.fromAxis(x, y);

            double result = Quaternion2D.subtract(joystickOrientation, robotOrientation).toDegrees();

            double dist = Math.sqrt(x * x + y * y);

            SmartDashboard.putNumber("res", result);
            SmartDashboard.putNumber("for", dist * Math.max(0, 1 - Math.abs(result / 90)));
            SmartDashboard.putNumber("turn", dist * (result / 180));

            drivetrain.driveDifferential(-dist * Math.max(0, 1 - Math.abs(result / 150)), -dist * processRotationPower(result));

            /*if(x != 0 || y != 0) {
                if(x == 0) {
                    x = Double.MIN_VALUE;
                }
                if(y == 0) {
                    y =  Double.MIN_VALUE;
                }
            }

            double xFinal = robotOrientation.x * x + robotOrientation.y * y;
            double yFinal = Math.signum(x) * (y * robotOrientation.x - x * robotOrientation.y);

            SmartDashboard.putNumber("Gyros", drivetrain.getGyroscopeRotation());
            SmartDashboard.putNumber("XFIn", xFinal);
            SmartDashboard.putNumber("YFin", yFinal);*/

            //drivetrain.driveDifferential(xFinal, 3 * yFinal);
        }
        else {
            double error = Quaternion2D.fromDegrees(drivetrain.getGyroscopeRotation()).toDegrees();

            drivetrain.driveDifferential(joystick.getAxis(MainJoystick.Y_AXIS), -joystick.getAxis(MainJoystick.X_AXIS));
        }
        if(false && joystick.getButtonReleased(MainJoystick.SWAP_DRIVE_ORIENTATION_BUTTON)) {
            isControlFieldOriented = !isControlFieldOriented;
        }
        if(false && joystick.getButtonReleased(MainJoystick.RUN_TEST_MOTOR_BUTTON)) {
            System.out.println("CHANGE");
            drivetrain.resetGyroscope();
        }
        //recorder.execute();
        SmartDashboard.putNumber("L", drivetrain.getLeftMotorOutput());
        SmartDashboard.putNumber("R", drivetrain.getRightMotorOutput());
        recorder.record();
    }



    //0.1s interval
    private static final String barrel = "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";
    //0.1s  interval
    private static final String slalom = "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";
    //private static final String pathRepShort = "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";
    //private static final String pathRep = "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";
    @Override
    public void finish(boolean interrupted) {
        //System.out.println(recorder.getStringRepresentation());
    }
}
