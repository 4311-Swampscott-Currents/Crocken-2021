package frc.robot.commands;

import org.swampscottcurrents.serpentframework.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.MainJoystick;
import frc.robot.Robot;
import frc.robot.RobotMovementRecorder;
import frc.robot.subsystems.*;

/** Allows for the driver to control the robot's drivetrain. */
public class OperatorControlCommand extends SerpentCommand {

    private final MainJoystick joystick;
    private final Drivetrain drivetrain;
    private boolean isControlFieldOriented = false;

    private RobotMovementRecorder recorder;

    /** Creates a new OperatorControlCommand for the specified drivetrain. */
    public OperatorControlCommand(Drivetrain train) {
        joystick = Robot.getInstance().joystick;
        drivetrain = train;
        addRequirements(train);
    }

    @Override
    public void initialize() {
        recorder = new RobotMovementRecorder(0.05, pathRepShort);
    }
    
    private double processRotationPower(double degrees) {
        final double maxPower = 0.75;
        return Math.max(-maxPower, Math.min(maxPower, signPow(degrees / 90, 0.35)));
    }

    private double signPow(double value, double power) {
        return Math.signum(value) * Math.pow(Math.abs(value), power);
    }

    @Override
    public void execute() {
        if(isControlFieldOriented) {
            Quaternion2D robotOrientation = Quaternion2D.fromDegrees(drivetrain.getGyroscopeRotation());

            double x = -joystick.getAxis(MainJoystick.Y_AXIS) * 0.75;
            double y = joystick.getAxis(MainJoystick.X_AXIS) * 0.75;

            Quaternion2D joystickOrientation = Quaternion2D.fromAxis(x, y);

            double result = Quaternion2D.subtract(joystickOrientation, robotOrientation).toDegrees();

            double dist = Math.sqrt(x * x + y * y);

            SmartDashboard.putNumber("res", result);
            SmartDashboard.putNumber("for", dist * Math.max(0, 1 - Math.abs(result / 90)));
            SmartDashboard.putNumber("turn", dist * (result / 180));

            drivetrain.driveDifferential(-dist * Math.max(0, 1 - Math.abs(result / 150)), -dist * processRotationPower(result));

            /*if(x != 0 || y != 0) {
                if(x == 0) {
                    x = Double.MIN_VALUE;
                }
                if(y == 0) {
                    y =  Double.MIN_VALUE;
                }
            }

            double xFinal = robotOrientation.x * x + robotOrientation.y * y;
            double yFinal = Math.signum(x) * (y * robotOrientation.x - x * robotOrientation.y);

            SmartDashboard.putNumber("Gyros", drivetrain.getGyroscopeRotation());
            SmartDashboard.putNumber("XFIn", xFinal);
            SmartDashboard.putNumber("YFin", yFinal);*/

            //drivetrain.driveDifferential(xFinal, 3 * yFinal);
        }
        else {
            drivetrain.driveDifferential(joystick.getAxis(MainJoystick.Y_AXIS), -joystick.getAxis(MainJoystick.X_AXIS));
        }
        if(joystick.getButtonReleased(MainJoystick.SWAP_DRIVE_ORIENTATION_BUTTON)) {
            drivetrain.resetGyroscope();
            isControlFieldOriented = !isControlFieldOriented;
        }
        recorder.execute();
        SmartDashboard.putNumber("L", drivetrain.getLeftMotorOutput());
        SmartDashboard.putNumber("R", drivetrain.getRightMotorOutput());
        //recorder.record();
    }

    private static final String pathRepShort = "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";
    private static final String pathRep = "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

    @Override
    public void finish(boolean interrupted) {
        System.out.println(recorder.getStringRepresentation());
    }
}
